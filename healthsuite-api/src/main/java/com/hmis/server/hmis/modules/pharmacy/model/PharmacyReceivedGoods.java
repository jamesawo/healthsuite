package com.hmis.server.hmis.modules.pharmacy.model;

import com.hmis.server.hmis.common.common.model.Auditable;
import com.hmis.server.hmis.common.common.model.Department;
import com.hmis.server.hmis.common.user.model.User;
import com.hmis.server.hmis.modules.others.model.Vendor;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import javax.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Data
@Entity
@Table( name = "hmis_pharmacy_received_good_data")
@EqualsAndHashCode( callSuper=true)
@NoArgsConstructor
@ToString
public class PharmacyReceivedGoods extends Auditable<String> {
	@Id
	@GeneratedValue( strategy = GenerationType.IDENTITY)
	private Long id;

	@OneToOne
	@JoinColumn(name = "drug_order_id", nullable = false)
	private DrugOrder drugOrder;

	@OneToOne
	@JoinColumn(name = "department_id")
	private Department receivingDepartment;

	@OneToOne
	@JoinColumn(name =  "vendor_id")
	private Vendor supplyingCompany;

	@Column(name = "received_by")
	private String receivedBy;

	@Column(name = "delivered_by")
	private String deliveredBy;

	@Column(name = "invoice_number")
	private String invoiceNumber;

	@Column(name = "invoice_date")
	private LocalDate invoiceDate;

	@Column(name = "purchase_order_number")
	private String purchaseOrderNumber;

	@Column(name = "delivered_note_number")
	private String deliveryNoteNumber;

	@Column(name = "date", nullable = false)
	private LocalDate date = LocalDate.now();

	@Column(name = "time", nullable = false)
	private LocalTime time = LocalTime.now();

	@Column(name = "related_information")
	private String relatedInformation;

	@Column(name = "auto_generated_code", unique = true, nullable = false)
	private String autoGeneratedCode;

	@Column(name = "total_amount_supplied")
	private Double totalAmountSupplied;

	@OneToOne
	@JoinColumn(name = "location_department_id", nullable = false)
	private Department location;

	@OneToOne
	@JoinColumn(name = "operating_user_id", nullable = false)
	private User user;

	@OneToMany(mappedBy = "pharmacyReceivedGoods", fetch = FetchType.LAZY)
	@Column()
	private List<PharmacyReceivedGoodsItem> receivedGoodsItemsList;
}
