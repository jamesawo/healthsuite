package com.hmis.server.hmis.modules.pharmacy.service;

import com.hmis.server.hmis.common.common.dto.DateDto;
import com.hmis.server.hmis.common.common.dto.DepartmentDto;
import com.hmis.server.hmis.common.common.dto.GenerateCodeDto;
import com.hmis.server.hmis.common.common.model.Department;
import com.hmis.server.hmis.common.common.service.CommonService;
import com.hmis.server.hmis.common.common.service.DepartmentServiceImpl;
import com.hmis.server.hmis.common.common.service.HmisUtilService;
import com.hmis.server.hmis.common.user.model.User;
import com.hmis.server.hmis.common.user.service.UserServiceImpl;
import com.hmis.server.hmis.modules.pharmacy.dto.*;
import com.hmis.server.hmis.modules.pharmacy.iservice.IDrugRequisitionService;
import com.hmis.server.hmis.modules.pharmacy.model.DrugRequisition;
import com.hmis.server.hmis.modules.pharmacy.model.DrugRequisitionItem;
import com.hmis.server.hmis.modules.pharmacy.repository.DrugRequisitionItemRepository;
import com.hmis.server.hmis.modules.pharmacy.repository.DrugRequisitionRepository;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;


import static com.hmis.server.hmis.common.constant.HmisCodeDefaults.DRUG_REQUISITION_PREFIX_DEFAULT;
import static com.hmis.server.hmis.common.constant.HmisGlobalSettingKeys.DRUG_REQUISITION_CODE_PREFIX;

@Service
@Slf4j
public class DrugRequisitionServiceImpl implements IDrugRequisitionService {
	@Autowired
	private DrugRequisitionRepository drugRequisitionRepository;
	@Autowired
	private DrugRequisitionItemRepository drugRequisitionItemRepository;
	@Autowired
	private DepartmentServiceImpl departmentService;
	@Autowired
	private UserServiceImpl userService;
	@Autowired
	private DrugRegisterServiceImpl drugRegisterService;
	@Autowired
	private CommonService commonService;
	@Autowired
	private HmisUtilService utilService;
	@Autowired
	private DrugIssuanceServiceImpl issuanceService;
	@Autowired
	private OutletReconciliationServiceImpl reconciliationService;


	@Override
	public DrugRequisition findOneDrugRequisition(Long requisitionId) {
		Optional< DrugRequisition > req = this.drugRequisitionRepository.findById(requisitionId);
		if( ! req.isPresent() ) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Invalid Requisition ID");
		}
		return req.get();
	}

	@Override
	public ResponseEntity toStoreRequisition(DrugRequisitionDto drugRequisitionDto){
		DrugRequisitionTypeEnum requisitionTypeEnum = drugRequisitionDto.getRequisitionTypeEnum();
		if( requisitionTypeEnum != DrugRequisitionTypeEnum.STORE ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Only Store Requisition Allowed");
		}
		return this.createRequisition(drugRequisitionDto);
	}

	@Override
	public ResponseEntity toOutletRequisition(DrugRequisitionDto drugRequisitionDto){
		DrugRequisitionTypeEnum requisitionTypeEnum = drugRequisitionDto.getRequisitionTypeEnum();
		if( requisitionTypeEnum != DrugRequisitionTypeEnum.OUTLET ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Only Outlet Requisition Allowed");
		}
		return this.createRequisition(drugRequisitionDto);
	}

	@Override
	public ResponseEntity saveRequisition(DrugRequisitionDto drugRequisitionDto) {
		if( drugRequisitionDto.getRequisitionItems().size() < 1 ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "No Request Items Provided");
		}
		return this.createRequisition(drugRequisitionDto);
	}

	@Override
	@Transactional
	public ResponseEntity createRequisition(DrugRequisitionDto drugRequisitionDto) {
		try {
			this.validateBeforeCreatingRequisition(drugRequisitionDto);
			DrugRequisition dtoToModel = this.mapDrugRequisitionDtoToModel(drugRequisitionDto);
			dtoToModel.setAutoGeneratedCode(this.autoGenerateCode());

			DrugRequisition saved = this.drugRequisitionRepository.save(dtoToModel);
			this.createManyRequisitionItems(drugRequisitionDto.getRequisitionItems(), saved);
			drugRequisitionDto.setId(saved.getId());
			return ResponseEntity.ok(drugRequisitionDto);
		}
		catch( RuntimeException e ) {
			log.debug(e.getMessage(), e);
			throw new RuntimeException(e.getMessage());
		}
	}

	@Override
	public void createManyRequisitionItems(List< DrugRequisitionItemDto > items, DrugRequisition drugRequisition) {
		if( items.size() > 0 ) {
			for( DrugRequisitionItemDto dto : items ) {
				DrugRequisitionItem drugRequisitionItem = this.mapDrugRequisitionItemDtoToModel(dto);
				drugRequisitionItem.setDrugRequisition(drugRequisition);
				this.drugRequisitionItemRepository.save(drugRequisitionItem);
			}
		}
	}

	@Override
	public List< DrugRequisitionDto > findAllByOutletAndDateRange(DepartmentDto outlet, DateDto startDate, DateDto endDate) {
		List< DrugRequisitionDto > dtoList = new ArrayList<>();
		if( ! outlet.getId().isPresent() ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Outlet Id is Required");
		}

		try {
			Department department = this.departmentService.findOne(outlet.getId().get());

			LocalDate date = this.utilService.transformToLocalDate(startDate);
			LocalDate date1 = this.utilService.transformToLocalDate(endDate);

			List< DrugRequisition > list = this.drugRequisitionRepository.findRecordByDepartmentAndDate(department, date, date1);
			if( list.size() > 0 ) {
				List< DrugRequisitionDto > result = new ArrayList<>();
				for( DrugRequisition drugRequisition : list ) {
					DrugRequisitionDto requisitionDto = mapDrugRequisitionModelToDto(drugRequisition);
					result.add(requisitionDto);
				}
				dtoList = result;
			}
			return dtoList;
		}
		catch( Exception e ) {
			e.printStackTrace();
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		}
	}

	@Override
	public ResponseEntity grantRequisition(DrugRequisitionDto drugRequisitionDto) {
		this.validateBeforeGrantRequisition(drugRequisitionDto); //quick validate payload
		try {
			DrugRequisition drugRequisition = this.findOneDrugRequisition(drugRequisitionDto.getId());
			//boolean isStore = drugRequisition.getRequisitionTypeEnum().toLowerCase().equals(DrugRequisitionTypeEnum.STORE.name().toLowerCase());
			boolean isStore = this.departmentService.isOutletStore(drugRequisition.getReceivingDepartment());

			this.updateRequisitionIsFulfilled(drugRequisition); //set drug requisition is fulfilled
			this.updateRequisitionItemIssuingQty(drugRequisitionDto.getRequisitionItems()); // update item issuing quantity

			User oneRaw = this.userService.findOneRaw(drugRequisitionDto.getOperatingUser().getId().get()); //get current operating user
			drugRequisition.setOperatingUser(oneRaw); //set user

			this.reconciliationService.addStockToReceivingOutlet(drugRequisition.getRequisitionItems(), drugRequisition.getReceivingDepartment(), isStore); // update receiving outlet stock balance
			this.reconciliationService.removeStockFromIssuingOutlet(drugRequisition.getRequisitionItems(), drugRequisition.getIssuingDepartment()); // update issuing outlet stock balance

			DrugIssuanceDto issuance = this.issuanceService.saveIssuanceFromRequisition(drugRequisition);
			drugRequisitionDto.setIssuance(issuance);
			drugRequisitionDto.setIsFulfilled(true);
			return ResponseEntity.ok(drugRequisitionDto);
		}
		catch( Exception e ) {
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		}
	}

	public void generateDrugRequisitionNote(){
		/* wip::
		hospitalName
		hospitalLogo
		issuingOutlet
		receivingOutlet
		requisitionCode
		requestDate
		orderItemList
			description
			strength
			unitOfIssue
			qtyRequested
			qtyIssued
			value
		total
		raisedBy
		 */
	}

	private void updateRequisitionItemIssuingQty(List< DrugRequisitionItemDto > dtoList) {
		if( dtoList.size() > 0 ) {
			for( DrugRequisitionItemDto dto : dtoList ) {
				this.updateRequisitionItemIssuingQty(dto);
			}
		}
	}

	private void updateRequisitionItemIssuingQty(DrugRequisitionItemDto dto) {
		this.drugRequisitionItemRepository.updateRequisitionItemIssuingQty(dto.getIssuingQuantity(), dto.getId());
	}

	private void updateRequisitionIsFulfilled(DrugRequisition drugRequisition) {
		this.drugRequisitionRepository.updateRequisitionIsFulfilled(true, drugRequisition.getId());
	}

	private List< DrugRequisitionItemDto > mapRequisitionItemsDtos(List< DrugRequisitionItem > modelList) {
		List< DrugRequisitionItemDto > dtoList = new ArrayList<>();
		if( modelList.size() > 0 ) {
			List< DrugRequisitionItemDto > list = new ArrayList<>();
			for( DrugRequisitionItem drugRequisitionItem : modelList ) {
				DrugRequisitionItemDto drugRequisitionItemDto = this.mapDrugRequisitionItemModelToDto(drugRequisitionItem);
				list.add(drugRequisitionItemDto);
			}
			dtoList = list;
		}
		return dtoList;
	}

	private DrugRequisition mapDrugRequisitionDtoToModel(DrugRequisitionDto dto) {
		DrugRequisition model = new DrugRequisition();
		if( ObjectUtils.isNotEmpty(dto.getId()) ) {
			model.setId(dto.getId());
		}
		if( ObjectUtils.isNotEmpty(dto.getIssuingDepartment()) && dto.getIssuingDepartment().getId().isPresent() ) {
			model.setIssuingDepartment(this.departmentService.findOne(dto.getIssuingDepartment().getId().get()));
		}
		if( ObjectUtils.isNotEmpty(dto.getReceivingDepartment()) && dto.getReceivingDepartment().getId().isPresent() ) {
			model.setReceivingDepartment(this.departmentService.findOne(dto.getReceivingDepartment().getId().get()));
		}
		if( ObjectUtils.isNotEmpty(dto.getLocation()) && dto.getLocation().getId().isPresent() ) {
			model.setLocation(this.departmentService.findOne(dto.getLocation().getId().get()));
		}
		if( ObjectUtils.isNotEmpty(dto.getOperatingUser()) && dto.getOperatingUser().getId().isPresent() ) {
			model.setOperatingUser(this.userService.findOneRaw(dto.getOperatingUser().getId().get()));
		}
		if( ObjectUtils.isNotEmpty(dto.getRequisitionTypeEnum()) ) {
			model.setRequisitionTypeEnum(dto.getRequisitionTypeEnum().name());
		}

		return model;
	}

	private DrugRequisitionDto mapDrugRequisitionModelToDto(DrugRequisition model) {
		DrugRequisitionDto dto = new DrugRequisitionDto();

		if( ObjectUtils.isNotEmpty(model.getId()) ) {
			dto.setId(model.getId());
		}
		if( ObjectUtils.isNotEmpty(model.getIssuingDepartment()) ) {
			dto.setIssuingDepartment(this.departmentService.mapModelToDto(model.getIssuingDepartment()));
		}
		if( ObjectUtils.isNotEmpty(model.getReceivingDepartment()) ) {
			dto.setReceivingDepartment(this.departmentService.mapModelToDto(model.getReceivingDepartment()));
		}
		if( ObjectUtils.isNotEmpty(model.getLocation()) ) {
			dto.setLocation(this.departmentService.mapModelToDto(model.getLocation()));
		}
		if( ObjectUtils.isNotEmpty(model.getOperatingUser()) ) {
			dto.setOperatingUser(this.userService.mapModelToDto(model.getOperatingUser()));
		}
		if( ObjectUtils.isNotEmpty(model.getRequisitionTypeEnum()) ) {
			dto.setRequisitionTypeEnum(DrugRequisitionTypeEnum.valueOf(model.getRequisitionTypeEnum()));
		}
		dto.setCode(model.getAutoGeneratedCode());
		dto.setDateDto(this.utilService.transformDateToDto(model.getCreatedDate()));
		dto.setDate(model.getCreatedDate());

		if( model.getIsFulfilled() ) {
			dto.setIssuance(this.issuanceService.findByDrugRequisitionIdDto(model.getId()));
		}

		if( model.getRequisitionItems().size() > 0 ) {
			dto.setRequisitionItems(this.mapRequisitionItemsDtos(model.getRequisitionItems()));
		}

		dto.setIsFulfilled(model.getIsFulfilled());
		return dto;
	}

	private DrugRequisitionItem mapDrugRequisitionItemDtoToModel(DrugRequisitionItemDto dto) {
		DrugRequisitionItem model = new DrugRequisitionItem();
		if( ObjectUtils.isNotEmpty(dto.getId()) ) {
			model.setId(dto.getId());
		}
		if( ObjectUtils.isNotEmpty(dto.getDrugRegister()) && ObjectUtils.isNotEmpty(dto.getDrugRegister().getId()) ) {
			model.setDrugRegister(this.drugRegisterService.findOne(dto.getDrugRegister().getId()));
		}
		if( ObjectUtils.isNotEmpty(dto.getRequestingQuantity()) ) {
			model.setRequestingQuantity(dto.getRequestingQuantity());
		}
		if( ObjectUtils.isNotEmpty(dto.getUnitOfIssue()) ) {
			model.setUnitOfIssue(dto.getUnitOfIssue());
		}
		if( ObjectUtils.isNotEmpty(dto.getIssuingOutletBalance()) ) {
			model.setIssuingOutletBalance(dto.getIssuingOutletBalance());
		}

		if( ObjectUtils.isNotEmpty(dto.getDrugRequisition()) && ObjectUtils.isNotEmpty(dto.getDrugRequisition().getId()) ) {
			model.setDrugRequisition(this.findOneDrugRequisition(dto.getDrugRequisition().getId()));
		}
		return model;
	}

	private DrugRequisitionItemDto mapDrugRequisitionItemModelToDto(DrugRequisitionItem model) {
		DrugRequisitionItemDto dto = new DrugRequisitionItemDto();
		if( ObjectUtils.isNotEmpty(model.getId()) ) {
			dto.setId(model.getId());
		}
		if( ObjectUtils.isNotEmpty(model.getDrugRegister()) && ObjectUtils.isNotEmpty(model.getDrugRegister().getId()) ) {
			dto.setDrugRegister(this.drugRegisterService.mapToDto(model.getDrugRegister()));
		}
		if( ObjectUtils.isNotEmpty(model.getRequestingQuantity()) ) {
			dto.setRequestingQuantity(model.getRequestingQuantity());
			dto.setIssuingQuantity(model.getRequestingQuantity());
		}
		if( ObjectUtils.isNotEmpty(model.getUnitOfIssue()) ) {
			dto.setUnitOfIssue(model.getUnitOfIssue());
		}

		//set issuing out let balance to current stock balance
		if( ObjectUtils.isNotEmpty(model.getDrugRequisition()) ) {
			OutletStockItemDto outletItemStock = this.reconciliationService.getOutletItemStock(model.getDrugRequisition().getIssuingDepartment().getId(), model.getDrugRegister().getId());
			dto.setIssuingOutletBalance(outletItemStock.getCurrentBalance());
		}

		if( ObjectUtils.isNotEmpty(model.getIssuingQuantity()) ) {
			if( model.getIssuingQuantity() == 0 ) {
				dto.setIssuingQuantity(model.getRequestingQuantity());
			}
			else {
				dto.setIssuingQuantity(model.getIssuingQuantity());
				dto.setIssuingOutletBalance(model.getIssuingOutletBalance()); //override previous setter
			}
		}

		return dto;
	}

	private void validateBeforeCreatingRequisition(DrugRequisitionDto dto) {
		if( ObjectUtils.isEmpty(dto.getReceivingDepartment()) || ObjectUtils.isEmpty(dto.getReceivingDepartment().getId()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Receiving Department Is Required");
		}
		if( ObjectUtils.isEmpty(dto.getIssuingDepartment()) || ObjectUtils.isEmpty(dto.getIssuingDepartment().getId()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Issuing Department Is Required");
		}
		if( ObjectUtils.isEmpty(dto.getRequisitionItems()) || dto.getRequisitionItems().size() < 1 ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Requisition Item Cannot Be Empty");
		}
		if( ObjectUtils.isEmpty(dto.getOperatingUser()) || ObjectUtils.isEmpty(dto.getOperatingUser().getId()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Operating User Is Required");
		}
		if( ObjectUtils.isEmpty(dto.getLocation()) || ObjectUtils.isEmpty(dto.getLocation().getId()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Location Is Required");
		}
		if( ObjectUtils.isEmpty(dto.getRequisitionTypeEnum()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Requisition Type Is Required");
		}
	}

	private void validateBeforeGrantRequisition(DrugRequisitionDto dto) {
		if( dto.getIsFulfilled().equals(true) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Requisition is Granted");
		}

		if( ObjectUtils.isEmpty(dto.getRequisitionItems()) ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "No Request Items Founds");
		}

		boolean flag = true;
		for( DrugRequisitionItemDto e : dto.getRequisitionItems() ) {
			if( e.getIssuingQuantity() == 0 || e.getIssuingQuantity() > e.getRequestingQuantity() ) {
				flag = false;
				break;
			}
		}
		if( ! flag ) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Item with invalid issuing quantity");
		}
	}
	
	private String autoGenerateCode(){
		GenerateCodeDto generateCodeDto = new GenerateCodeDto();
		generateCodeDto.setDefaultPrefix(DRUG_REQUISITION_PREFIX_DEFAULT);
		generateCodeDto.setGlobalSettingKey(Optional.of(DRUG_REQUISITION_CODE_PREFIX));
		generateCodeDto.setLastGeneratedCode(this.drugRequisitionRepository.findTopByOrderByIdDesc().map(DrugRequisition::getAutoGeneratedCode));
		return commonService.generateDataCode(generateCodeDto);
	}

}
